{"version":3,"sources":["../src/datasource.js"],"names":["GenericDatasource","instanceSettings","$q","backendSrv","templateSrv","type","url","name","q","withCredentials","headers","basicAuth","length","response","doRequest","method","then","result","data","regionId","catch","console","log","reason","options","query","buildQueryParameters","targets","filter","t","hide","when","current_target","regions_ids","getRegions","result_data","Promise","all","map","getRegion","obj","allResults","i","regionData","parseFloat","push","rows","getServices","measures","novaServiceStatus","neutronServiceStatus","cinderServiceStatus","glanceServiceStatus","FiHealthStatus","arrayResult","total_nb_vm","parseInt","Math","round","Date","getTime","total_ip","total_nb_cores","getAdhocFilters","adhocFilters","status","message","title","replace","annotation","annotationQuery","range","datasource","enable","iconColor","rangeRaw","text","value","_","d","isObject","datasourceRequest","target","scopedVars","refId","resolve","reject"],"mappings":"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","file":"datasource.js","sourcesContent":["import _ from \"lodash\";\n\nexport class GenericDatasource {\n\n  constructor(instanceSettings, $q, backendSrv, templateSrv) {\n    this.type = instanceSettings.type;\n    this.url = instanceSettings.url;\n    this.name = instanceSettings.name;\n    this.q = $q;\n    this.backendSrv = backendSrv;\n    this.templateSrv = templateSrv;\n    this.withCredentials = instanceSettings.withCredentials;\n    this.headers = {'Content-Type': 'application/json'};\n    if (typeof instanceSettings.basicAuth === 'string' && instanceSettings.basicAuth.length > 0) {\n      this.headers['Authorization'] = instanceSettings.basicAuth;\n    }\n  }\n\n  getRegions()\n  {\n      var response = this.doRequest({\n            url: this.url + '/monitoring/regions',\n            method: 'GET'\n        }).then(result => {\n            return result.data;\n        });\n\n      return response;\n  }\n\n  getRegion(regionId)\n  {\n      var response = this.doRequest({\n            url: this.url + '/monitoring/regions/'+regionId,\n            method: 'GET'\n        }).then(result => {\n            return result.data;\n        }).catch(reason => {\n            console.log(reason.data);\n            return reason.data;\n        });\n\n      return response;\n  }\n\n  getServices(regionId)\n  {\n      var response = this.doRequest({\n            url: this.url + '/monitoring/regions/'+regionId+'/services',\n            method: 'GET'\n        }).then(result => {\n            return result.data;\n        });\n\n      return response;\n  }\n\n//   Returns data from Federation Monitoring APIs if the target is: map_points (Map panel), servicesTableJSON (table panel), totalVMs (single stat panel), totalIPs (single stat panel) or totalCores (single stat panel)\n  query(options) {\n    var query = this.buildQueryParameters(options);\n    query.targets = query.targets.filter(t => !t.hide);\n\n    if (query.targets.length <= 0) {\n      return this.q.when({data: []});\n    }\n\n    var current_target = null;\n    if (\"target\" in query.targets[0])\n        current_target = query.targets[0][\"target\"];\n\n    if (current_target == \"map_points\" )\n    {\n//         return {\"data\":[{\"key\": \"ES\",\"latitude\": 40.416775,\"longitude\": -3.70379,\"name\": \"Spain\"},{\"key\": \"GR\",\"latitude\": 35.53,\"longitude\": 24.06,\"name\": \"Crete\"}]};\n\n        var response = {\"data\":[]};\n        var regions_ids = [];\n        return this.getRegions().then(result => {\n            var result_data = result;\n            var regions_ids = result_data[\"_embedded\"][\"regions\"];\n\n            return Promise.all(regions_ids.map(obj =>this.getRegion(obj[\"id\"]))).then(data => {\n                                            var allResults = data;\n                                            console.log(allResults);\n\n                                            for (var i = 0; i < allResults.length; i++)\n                                            {\n                                                var result_data = allResults[i];\n\n                                                var regionData = null\n                                                if(\"data\" in result_data)\n                                                {\n                                                    regionData = {\n                                                        \"key\": result_data[\"name\"],\n                                                        \"latitude\": parseFloat(result_data[\"data\"][1]),\n                                                        \"longitude\": parseFloat(result_data[\"data\"][2]),\n                                                        \"name\": result_data[\"name\"],\n                                                        \"value\": 0\n                                                    };\n                                                }\n                                                else\n                                                {\n                                                    regionData = {\n                                                        \"key\": result_data[\"name\"],\n                                                        \"latitude\": parseFloat(result_data[\"latitude\"]),\n                                                        \"longitude\": parseFloat(result_data[\"longitude\"]),\n                                                        \"name\": result_data[\"name\"],\n                                                        \"value\": 5\n                                                    };\n                                                }\n                                                if (regionData)\n                                                {\n                                                    response[\"data\"].push(regionData);\n                                                }\n                                                console.log(\"pushing region data in response\");\n                                                console.log(regionData);\n                                            }\n\n                                            console.log(\"returning:...\");\n                                            console.log(response);\n                                            return response;\n                                        })\n\n        }).then(result => {return result});\n    }\n    else if (current_target == \"servicesTableJSON\" )\n    {\n        var response = {\"data\":[{\n            \"type\":\"table\",\n            \"columns\":[\n                {\"text\":\"Node\",\"type\":\"string\"},\n                {\"text\":\"Nova\",\"type\":\"number\"},\n                {\"text\":\"Neutron\",\"type\":\"number\"},\n                {\"text\":\"Cinder\",\"type\":\"number\"},\n                {\"text\":\"Glance\",\"type\":\"number\"},\n                {\"text\":\"Sanity\",\"type\":\"number\"}\n            ],\n            \"rows\":[]\n\n        }]};\n\n        var rows = [];\n        var regions_ids = [];\n        return this.getRegions().then(result => {\n            var result_data = result;\n            var regions_ids = result_data[\"_embedded\"][\"regions\"];\n\n            return Promise.all(regions_ids.map(obj =>this.getServices(obj[\"id\"]))).then(data => {\n                                            var allResults = data;\n                                            console.log(allResults);\n                                            var rows = [];\n                                            for (var i = 0; i < allResults.length; i++)\n                                            {\n                                                var result_data = allResults[i];\n\n                                                var measures = result_data[\"measures\"][0];\n\n                                                var novaServiceStatus,\n                                                    neutronServiceStatus,\n                                                    cinderServiceStatus,\n                                                    glanceServiceStatus,\n                                                    FiHealthStatus;\n                                                novaServiceStatus=neutronServiceStatus=cinderServiceStatus=glanceServiceStatus=FiHealthStatus = null;\n\n                                                if(measures[\"novaServiceStatus\"][\"value_clean\"] != \"undefined\")\n                                                    novaServiceStatus = parseFloat(measures[\"novaServiceStatus\"][\"value_clean\"]);\n                                                if(measures[\"neutronServiceStatus\"][\"value_clean\"] != \"undefined\")\n                                                    neutronServiceStatus = parseFloat(measures[\"neutronServiceStatus\"][\"value_clean\"]);\n                                                if(measures[\"cinderServiceStatus\"][\"value_clean\"] != \"undefined\")\n                                                    cinderServiceStatus = parseFloat(measures[\"cinderServiceStatus\"][\"value_clean\"]);\n                                                if(measures[\"glanceServiceStatus\"][\"value_clean\"] != \"undefined\")\n                                                    glanceServiceStatus = parseFloat(measures[\"glanceServiceStatus\"][\"value_clean\"]);\n                                                if(measures[\"FiHealthStatus\"][\"value_clean\"] != \"undefined\")\n                                                    FiHealthStatus = parseFloat(measures[\"FiHealthStatus\"][\"value_clean\"]);\n\n                                                var arrayResult = [\n                                                                    result_data[\"id\"],\n                                                                    novaServiceStatus,\n                                                                    neutronServiceStatus,\n                                                                    cinderServiceStatus,\n                                                                    glanceServiceStatus,\n                                                                    FiHealthStatus\n                                                                ];\n                                                rows.push(arrayResult);\n                                                console.log(\"pushing array in rows\");\n                                                console.log(arrayResult);\n                                            }\n                                            response[\"data\"][0][\"rows\"] = rows;\n                                            console.log(\"returning:...\");\n                                            console.log(response);\n                                            return response;\n                                        })\n\n        }).then(result => {return result});\n    }\n    else if (current_target == \"totalVMs\" )\n    {\n        return this.getRegions().then(result => {\n            var result_data = result;\n            var total_nb_vm = parseInt(result_data[\"total_nb_vm\"]);\n            return {\"data\":[{\"target\": current_target, \"datapoints\": [[total_nb_vm, Math.round((new Date()).getTime() / 1000)]]}]};\n        });\n    }\n    else if (current_target == \"totalIPs\" )\n    {\n        return this.getRegions().then(result => {\n            var result_data = result;\n            var total_ip = parseInt(result_data[\"total_ip\"]);\n            return {\"data\":[{\"target\": current_target, \"datapoints\": [[total_ip, Math.round((new Date()).getTime() / 1000)]]}]};\n        });\n    }\n    else if (current_target == \"totalCores\" )\n    {\n        return this.getRegions().then(result => {\n            var result_data = result;\n            var total_nb_cores = parseInt(result_data[\"total_nb_cores\"]);\n            return {\"data\":[{\"target\": current_target, \"datapoints\": [[total_nb_cores, Math.round((new Date()).getTime() / 1000)]]}]};\n        });\n    }\n    else\n    {\n\n        if (this.templateSrv.getAdhocFilters) {\n        query.adhocFilters = this.templateSrv.getAdhocFilters(this.name);\n        } else {\n        query.adhocFilters = [];\n        }\n\n        return this.doRequest({\n        url: this.url + '/query',\n        data: query,\n        method: 'POST'\n        });\n    }\n  }\n\n  testDatasource() {\n    return this.doRequest({\n      url: this.url + '/',\n      method: 'GET',\n    }).then(response => {\n      if (response.status === 200) {\n        return { status: \"success\", message: \"Data source is working\", title: \"Success\" };\n      }\n    });\n  }\n\n  annotationQuery(options) {\n    var query = this.templateSrv.replace(options.annotation.query, {}, 'glob');\n    var annotationQuery = {\n      range: options.range,\n      annotation: {\n        name: options.annotation.name,\n        datasource: options.annotation.datasource,\n        enable: options.annotation.enable,\n        iconColor: options.annotation.iconColor,\n        query: query\n      },\n      rangeRaw: options.rangeRaw\n    };\n\n    return this.doRequest({\n      url: this.url + '/annotations',\n      method: 'POST',\n      data: annotationQuery\n    }).then(result => {\n      return result.data;\n    });\n  }\n\n  metricFindQuery(query) {\n//     var interpolated = {\n//         target: this.templateSrv.replace(query, null, 'regex')\n//     };\n//\n//     return this.doRequest({\n//       url: this.url + '/search',\n//       data: interpolated,\n//       method: 'POST',\n//     }).then(this.mapToTextValue);\n//       console.log(query);\n      return [\n                { text :\"servicesTableJSON\", value :\"servicesTableJSON\" },\n                { text :\"totalVMs\", value :\"totalVMs\" },\n                { text :\"totalIPs\", value :\"totalIPs\"},\n                { text :\"totalCores\", value :\"totalCores\"},\n                { text :\"map_points\", value :\"map_points\" }\n             ];\n  }\n\n  mapToTextValue(result) {\n    return _.map(result.data, (d, i) => {\n      if (d && d.text && d.value) {\n        return { text: d.text, value: d.value };\n      } else if (_.isObject(d)) {\n        return { text: d, value: i};\n      }\n      return { text: d, value: d };\n    });\n  }\n\n  doRequest(options) {\n    options.withCredentials = this.withCredentials;\n    options.headers = this.headers;\n\n    return this.backendSrv.datasourceRequest(options);\n  }\n\n  buildQueryParameters(options) {\n    //remove placeholder targets\n    options.targets = _.filter(options.targets, target => {\n      return target.target !== 'select metric';\n    });\n\n    var targets = _.map(options.targets, target => {\n      return {\n        target: this.templateSrv.replace(target.target, options.scopedVars, 'regex'),\n        refId: target.refId,\n        hide: target.hide,\n        type: target.type || 'timeserie'\n      };\n    });\n\n    options.targets = targets;\n\n    return options;\n  }\n\n  getTagKeys(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-keys',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n  getTagValues(options) {\n    return new Promise((resolve, reject) => {\n      this.doRequest({\n        url: this.url + '/tag-values',\n        method: 'POST',\n        data: options\n      }).then(result => {\n        return resolve(result.data);\n      });\n    });\n  }\n\n}\n"]}